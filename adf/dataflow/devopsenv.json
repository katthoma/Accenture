{
	"name": "devopsenv",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "adfinputjson",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "adfinputjson",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "adfinputjson",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "adfinputjson",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dependmetaoutput",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "adfoutputJSON",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "adfoutputJSON",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "adfoutputJSON",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "Services"
				},
				{
					"name": "Template"
				},
				{
					"name": "ErrorCritical"
				},
				{
					"name": "ErrorsWarning"
				}
			],
			"script": "source(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source2\nsource(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source3\nsource(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source4\nsource1 foldDown(unroll(Services, Services),\n\tmapColumn(\n\t\tName = Services.Name,\n\t\tVersion = Services.Version,\n\t\tInUse = Services.InUse,\n\t\tcollectionSource = Services.collectionSource\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Services\nsource2 foldDown(unroll(Templates, Templates),\n\tmapColumn(\n\t\tName = Templates.Name,\n\t\tVersion = Templates.Version,\n\t\tInUse = Templates.InUse,\n\t\tcollectionSource = Templates.collectionSource\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Template\nsource3 foldDown(unroll(Errors.CRITICAL, Errors.CRITICAL),\n\tmapColumn(\n\t\tSource = Errors.CRITICAL.Source,\n\t\tTime = Errors.CRITICAL.Time,\n\t\tMessage = Errors.CRITICAL.Message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ErrorCritical\nsource4 foldDown(unroll(Errors.WARNING, Errors.WARNING),\n\tmapColumn(\n\t\tSource = Errors.WARNING.Source,\n\t\tTime = Errors.WARNING.Time,\n\t\tMessage = Errors.WARNING.Message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ErrorsWarning\nServices sink(input(\n\t\tcollectionSource as string,\n\t\tcustom as (Endpoints as string[], {InUse[Yes/No]} as boolean, Name as string),\n\t\tmeta as (requires as (jsonparse as string, through as string), dev as boolean),\n\t\tname as string,\n\t\tsource as string,\n\t\tsourceType as string,\n\t\ttype as string,\n\t\tversion as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopsservices.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nTemplate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopstemplate.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2\nErrorCritical sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopserrorcritical.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink3\nErrorsWarning sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopserrorswarning.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink4"
		}
	}
}