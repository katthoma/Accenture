{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "accadf1"
		},
		"ADX1_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'ADX1'"
		},
		"accdeltaoutput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'accdeltaoutput'"
		},
		"accoutput_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'accoutput'"
		},
		"iotcentralblob1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'iotcentralblob1'"
		},
		"sqlb1input_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlb1input'"
		},
		"waginput1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'waginput1'"
		},
		"accadlsinput_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'accadlsinput'"
		},
		"ADX1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"ADX1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "da4ee700-880e-4026-b700-5d77491cdfb5"
		},
		"ADX1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "jemtsdb"
		},
		"accoutput_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://accbbstore.dfs.core.windows.net"
		},
		"iotcentralblob1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://iotcentralstore.dfs.core.windows.net"
		},
		"waginput1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://waginput.dfs.core.windows.net"
		},
		"accadlsinput_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://accbbstore.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ForEachTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select connstr from tblconnstr;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connstrinput",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(activity('Lookup1').output)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "adfinput",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "adfoutput",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "connstr",
										"value": {
											"value": "@string(item().value)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "dataflow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "fordataflow",
											"type": "DataFlowReference",
											"parameters": {
												"cstr": {
													"value": "'@{variables('connstr')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"connstr": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connstrinput')]",
				"[concat(variables('factoryId'), '/datasets/adfinput')]",
				"[concat(variables('factoryId'), '/datasets/adfoutput')]",
				"[concat(variables('factoryId'), '/dataflows/fordataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenDataSetCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Opendatasetcopy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binarycopy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binaryacc",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binarycopy')]",
				"[concat(variables('factoryId'), '/datasets/Binaryacc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cdmCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyCDM",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "cdminput",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "cdmOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cdminput')]",
				"[concat(variables('factoryId'), '/datasets/cdmOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/concurrencytest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "parquetconcurency",
								"type": "DataFlowReference",
								"parameters": {
									"param1": {
										"value": "'@{3}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "parquetconcurency",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "parquetconcurency",
								"type": "DataFlowReference",
								"parameters": {
									"param1": "\"3\""
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/parquetconcurency')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/iotcentralblobtoadx')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "iotcentralblobtoADX",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"iotcentralblob": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/iotcentralblobtoADX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADX1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "iotcentraltelemetry"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADX1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binaryacc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "opendataset"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binarycopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "waginput1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "opendataset"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/waginput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Jsonoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "iotdatadump"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1incoming')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "parquetincoming"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "asset",
						"type": "UTF8"
					},
					{
						"name": "asset_tag",
						"type": "UTF8"
					},
					{
						"name": "assigned",
						"type": "UTF8"
					},
					{
						"name": "assigned_to",
						"type": "UTF8"
					},
					{
						"name": "assignment_group",
						"type": "UTF8"
					},
					{
						"name": "attributes",
						"type": "UTF8"
					},
					{
						"name": "can_print",
						"type": "UTF8"
					},
					{
						"name": "category",
						"type": "UTF8"
					},
					{
						"name": "cd_rom",
						"type": "UTF8"
					},
					{
						"name": "cd_speed",
						"type": "UTF8"
					},
					{
						"name": "change_control",
						"type": "UTF8"
					},
					{
						"name": "chassis_type",
						"type": "UTF8"
					},
					{
						"name": "checked_in",
						"type": "UTF8"
					},
					{
						"name": "checked_out",
						"type": "UTF8"
					},
					{
						"name": "classification",
						"type": "UTF8"
					},
					{
						"name": "comments",
						"type": "UTF8"
					},
					{
						"name": "company",
						"type": "UTF8"
					},
					{
						"name": "correlation_id",
						"type": "UTF8"
					},
					{
						"name": "cost",
						"type": "UTF8"
					},
					{
						"name": "cost_cc",
						"type": "UTF8"
					},
					{
						"name": "cost_center",
						"type": "UTF8"
					},
					{
						"name": "cpu_core_count",
						"type": "UTF8"
					},
					{
						"name": "cpu_core_thread",
						"type": "UTF8"
					},
					{
						"name": "cpu_count",
						"type": "UTF8"
					},
					{
						"name": "cpu_manufacturer",
						"type": "UTF8"
					},
					{
						"name": "cpu_name",
						"type": "UTF8"
					},
					{
						"name": "cpu_speed",
						"type": "UTF8"
					},
					{
						"name": "cpu_type",
						"type": "UTF8"
					},
					{
						"name": "default_gateway",
						"type": "UTF8"
					},
					{
						"name": "delivery_date",
						"type": "UTF8"
					},
					{
						"name": "department",
						"type": "UTF8"
					},
					{
						"name": "discovery_source",
						"type": "UTF8"
					},
					{
						"name": "disk_space",
						"type": "UTF8"
					},
					{
						"name": "dns_domain",
						"type": "UTF8"
					},
					{
						"name": "dr_backup",
						"type": "UTF8"
					},
					{
						"name": "due",
						"type": "UTF8"
					},
					{
						"name": "due_in",
						"type": "UTF8"
					},
					{
						"name": "fault_count",
						"type": "UTF8"
					},
					{
						"name": "firewall_status",
						"type": "UTF8"
					},
					{
						"name": "first_discovered",
						"type": "UTF8"
					},
					{
						"name": "floppy",
						"type": "UTF8"
					},
					{
						"name": "form_factor",
						"type": "UTF8"
					},
					{
						"name": "fqdn",
						"type": "UTF8"
					},
					{
						"name": "gl_account",
						"type": "UTF8"
					},
					{
						"name": "hardware_status",
						"type": "UTF8"
					},
					{
						"name": "hardware_substatus",
						"type": "UTF8"
					},
					{
						"name": "host_name",
						"type": "UTF8"
					},
					{
						"name": "install_date",
						"type": "UTF8"
					},
					{
						"name": "install_status",
						"type": "UTF8"
					},
					{
						"name": "invoice_number",
						"type": "UTF8"
					},
					{
						"name": "ip_address",
						"type": "UTF8"
					},
					{
						"name": "justification",
						"type": "UTF8"
					},
					{
						"name": "last_discovered",
						"type": "UTF8"
					},
					{
						"name": "lease_id",
						"type": "UTF8"
					},
					{
						"name": "location",
						"type": "UTF8"
					},
					{
						"name": "mac_address",
						"type": "UTF8"
					},
					{
						"name": "maintenance_schedule",
						"type": "UTF8"
					},
					{
						"name": "managed_domain",
						"type": "UTF8"
					},
					{
						"name": "manufacturer",
						"type": "UTF8"
					},
					{
						"name": "model_id",
						"type": "UTF8"
					},
					{
						"name": "model_number",
						"type": "UTF8"
					},
					{
						"name": "name",
						"type": "UTF8"
					},
					{
						"name": "object_id",
						"type": "UTF8"
					},
					{
						"name": "operational_status",
						"type": "UTF8"
					},
					{
						"name": "order_date",
						"type": "UTF8"
					},
					{
						"name": "os",
						"type": "UTF8"
					},
					{
						"name": "os_address_width",
						"type": "UTF8"
					},
					{
						"name": "os_domain",
						"type": "UTF8"
					},
					{
						"name": "os_service_pack",
						"type": "UTF8"
					},
					{
						"name": "os_version",
						"type": "UTF8"
					},
					{
						"name": "owned_by",
						"type": "UTF8"
					},
					{
						"name": "po_number",
						"type": "UTF8"
					},
					{
						"name": "processor_name",
						"type": "UTF8"
					},
					{
						"name": "purchase_date",
						"type": "UTF8"
					},
					{
						"name": "ram",
						"type": "UTF8"
					},
					{
						"name": "schedule",
						"type": "UTF8"
					},
					{
						"name": "serial_number",
						"type": "UTF8"
					},
					{
						"name": "short_description",
						"type": "UTF8"
					},
					{
						"name": "skip_sync",
						"type": "UTF8"
					},
					{
						"name": "start_date",
						"type": "UTF8"
					},
					{
						"name": "subcategory",
						"type": "UTF8"
					},
					{
						"name": "support_group",
						"type": "UTF8"
					},
					{
						"name": "supported_by",
						"type": "UTF8"
					},
					{
						"name": "sys_class_name",
						"type": "UTF8"
					},
					{
						"name": "sys_class_path",
						"type": "UTF8"
					},
					{
						"name": "sys_created_by",
						"type": "UTF8"
					},
					{
						"name": "sys_created_on",
						"type": "UTF8"
					},
					{
						"name": "sys_domain",
						"type": "UTF8"
					},
					{
						"name": "sys_domain_path",
						"type": "UTF8"
					},
					{
						"name": "sys_id",
						"type": "UTF8"
					},
					{
						"name": "sys_mod_count",
						"type": "UTF8"
					},
					{
						"name": "sys_updated_by",
						"type": "UTF8"
					},
					{
						"name": "sys_updated_on",
						"type": "UTF8"
					},
					{
						"name": "u_additional_attributes",
						"type": "UTF8"
					},
					{
						"name": "u_application_id",
						"type": "UTF8"
					},
					{
						"name": "u_asset_id",
						"type": "UTF8"
					},
					{
						"name": "u_asset_owner",
						"type": "UTF8"
					},
					{
						"name": "u_business_approver_groups",
						"type": "UTF8"
					},
					{
						"name": "u_business_approvers",
						"type": "UTF8"
					},
					{
						"name": "u_cab_approver_groups",
						"type": "UTF8"
					},
					{
						"name": "u_cab_approvers",
						"type": "UTF8"
					},
					{
						"name": "u_category",
						"type": "UTF8"
					},
					{
						"name": "u_ci_manager",
						"type": "UTF8"
					},
					{
						"name": "u_corporate_structure",
						"type": "UTF8"
					},
					{
						"name": "u_corporatestructure1",
						"type": "UTF8"
					},
					{
						"name": "u_delivery_date",
						"type": "UTF8"
					},
					{
						"name": "u_device_type",
						"type": "UTF8"
					},
					{
						"name": "u_hardware_operating_system",
						"type": "UTF8"
					},
					{
						"name": "u_hardware_os_version",
						"type": "UTF8"
					},
					{
						"name": "u_managed_by_group",
						"type": "UTF8"
					},
					{
						"name": "u_rack",
						"type": "UTF8"
					},
					{
						"name": "u_refresh_due_date",
						"type": "UTF8"
					},
					{
						"name": "u_room",
						"type": "UTF8"
					},
					{
						"name": "u_site_support_team",
						"type": "UTF8"
					},
					{
						"name": "u_start_tool_last_modified_by",
						"type": "UTF8"
					},
					{
						"name": "u_start_tool_last_modified_date",
						"type": "UTF8"
					},
					{
						"name": "u_support_model",
						"type": "UTF8"
					},
					{
						"name": "u_support_model_management",
						"type": "UTF8"
					},
					{
						"name": "u_technical_approver_groups",
						"type": "UTF8"
					},
					{
						"name": "u_technical_approvers",
						"type": "UTF8"
					},
					{
						"name": "unverified",
						"type": "UTF8"
					},
					{
						"name": "used_for",
						"type": "UTF8"
					},
					{
						"name": "vendor",
						"type": "UTF8"
					},
					{
						"name": "virtual",
						"type": "UTF8"
					},
					{
						"name": "warranty_expiration",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "parquetoutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfinput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "adfinput"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "adfoutput"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cdmOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "cdm"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cdminput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "waginput1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "cdm"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/waginput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/connstrinput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlb1input",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "connstr",
						"type": "varchar"
					},
					{
						"name": "inserttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblconnstr"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqlb1input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvouput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "iotdatadump"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/iotcentralblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "iotcentralblob1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "3a11d300-d923-4a3d-9cd9-75364b23f710/telemetry/2020",
						"fileSystem": "telemetry"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"EnqueuedTimeUtc": {
							"type": "string"
						},
						"Properties": {
							"type": "object"
						},
						"SystemProperties": {
							"type": "object",
							"properties": {
								"connectionDeviceId": {
									"type": "string"
								},
								"connectionAuthMethod": {
									"type": "string"
								},
								"connectionDeviceGenerationId": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"interfaceName": {
									"type": "string"
								},
								"enqueuedTime": {
									"type": "string"
								}
							}
						},
						"Body": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/iotcentralblob1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqloutputconn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlb1input",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "connstr",
						"type": "varchar"
					},
					{
						"name": "inserttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblconnstr1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqlb1input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADX1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataExplorer",
				"typeProperties": {
					"endpoint": "https://iiotstore.eastus2.kusto.windows.net",
					"tenant": "[parameters('ADX1_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('ADX1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('ADX1_servicePrincipalKey')]"
					},
					"database": "[parameters('ADX1_properties_typeProperties_database')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/accdeltaoutput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('accdeltaoutput_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/accoutput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('accoutput_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('accoutput_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/iotcentralblob1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('iotcentralblob1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('iotcentralblob1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlb1input')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sqlb1input_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/waginput1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('waginput1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('waginput1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fordataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connstrinput",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sqloutputconn",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tcstr as string\n}\nsource(output(\n\t\tid as long,\n\t\tconnstr as string,\n\t\tinserttime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nDerivedColumn1 select(mapColumn(\n\t\tconnstr = tmpconstr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsource1 derive(tmpconstr = $cstr) ~> DerivedColumn1\nSelect1 sink(input(\n\t\tid as long,\n\t\tconnstr as string,\n\t\tinserttime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connstrinput')]",
				"[concat(variables('factoryId'), '/datasets/sqloutputconn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/iotcentralblobtoADX')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "iotcentralblob",
								"type": "DatasetReference"
							},
							"name": "iotcentralblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Jsonoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tEnqueuedTimeUtc as string,\n\t\tProperties as ({} as string),\n\t\tSystemProperties as (connectionDeviceId as string, connectionAuthMethod as string, connectionDeviceGenerationId as string, contentType as string, interfaceName as string, enqueuedTime as string),\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['3a11d300-d923-4a3d-9cd9-75364b23f710/telemetry/*/*/*/*/*']) ~> iotcentralblob\niotcentralblob derive(BodyString = fromBase64(Body)) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tBodyString\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/iotcentralblob')]",
				"[concat(variables('factoryId'), '/datasets/Jsonoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquetconcurency')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Parquet1incoming",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "accdeltaoutput",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tparam1 as string (\"3\")\n}\nsource(output(\n\t\tasset as string,\n\t\tasset_tag as string,\n\t\tassigned as string,\n\t\tassigned_to as string,\n\t\tassignment_group as string,\n\t\tattributes as string,\n\t\tcan_print as string,\n\t\tcategory as string,\n\t\tcd_rom as string,\n\t\tcd_speed as string,\n\t\tchange_control as string,\n\t\tchassis_type as string,\n\t\tchecked_in as string,\n\t\tchecked_out as string,\n\t\tclassification as string,\n\t\tcomments as string,\n\t\tcompany as string,\n\t\tcorrelation_id as string,\n\t\tcost as string,\n\t\tcost_cc as string,\n\t\tcost_center as string,\n\t\tcpu_core_count as string,\n\t\tcpu_core_thread as string,\n\t\tcpu_count as string,\n\t\tcpu_manufacturer as string,\n\t\tcpu_name as string,\n\t\tcpu_speed as string,\n\t\tcpu_type as string,\n\t\tdefault_gateway as string,\n\t\tdelivery_date as string,\n\t\tdepartment as string,\n\t\tdiscovery_source as string,\n\t\tdisk_space as string,\n\t\tdns_domain as string,\n\t\tdr_backup as string,\n\t\tdue as string,\n\t\tdue_in as string,\n\t\tfault_count as string,\n\t\tfirewall_status as string,\n\t\tfirst_discovered as string,\n\t\tfloppy as string,\n\t\tform_factor as string,\n\t\tfqdn as string,\n\t\tgl_account as string,\n\t\thardware_status as string,\n\t\thardware_substatus as string,\n\t\thost_name as string,\n\t\tinstall_date as string,\n\t\tinstall_status as string,\n\t\tinvoice_number as string,\n\t\tip_address as string,\n\t\tjustification as string,\n\t\tlast_discovered as string,\n\t\tlease_id as string,\n\t\tlocation as string,\n\t\tmac_address as string,\n\t\tmaintenance_schedule as string,\n\t\tmanaged_domain as string,\n\t\tmanufacturer as string,\n\t\tmodel_id as string,\n\t\tmodel_number as string,\n\t\tname as string,\n\t\tobject_id as string,\n\t\toperational_status as string,\n\t\torder_date as string,\n\t\tos as string,\n\t\tos_address_width as string,\n\t\tos_domain as string,\n\t\tos_service_pack as string,\n\t\tos_version as string,\n\t\towned_by as string,\n\t\tpo_number as string,\n\t\tprocessor_name as string,\n\t\tpurchase_date as string,\n\t\tram as string,\n\t\tschedule as string,\n\t\tserial_number as string,\n\t\tshort_description as string,\n\t\tskip_sync as string,\n\t\tstart_date as string,\n\t\tsubcategory as string,\n\t\tsupport_group as string,\n\t\tsupported_by as string,\n\t\tsys_class_name as string,\n\t\tsys_class_path as string,\n\t\tsys_created_by as string,\n\t\tsys_created_on as string,\n\t\tsys_domain as string,\n\t\tsys_domain_path as string,\n\t\tsys_id as string,\n\t\tsys_mod_count as string,\n\t\tsys_updated_by as string,\n\t\tsys_updated_on as string,\n\t\tu_additional_attributes as string,\n\t\tu_application_id as string,\n\t\tu_asset_id as string,\n\t\tu_asset_owner as string,\n\t\tu_business_approver_groups as string,\n\t\tu_business_approvers as string,\n\t\tu_cab_approver_groups as string,\n\t\tu_cab_approvers as string,\n\t\tu_category as string,\n\t\tu_ci_manager as string,\n\t\tu_corporate_structure as string,\n\t\tu_corporatestructure1 as string,\n\t\tu_delivery_date as string,\n\t\tu_device_type as string,\n\t\tu_hardware_operating_system as string,\n\t\tu_hardware_os_version as string,\n\t\tu_managed_by_group as string,\n\t\tu_rack as string,\n\t\tu_refresh_due_date as string,\n\t\tu_room as string,\n\t\tu_site_support_team as string,\n\t\tu_start_tool_last_modified_by as string,\n\t\tu_start_tool_last_modified_date as string,\n\t\tu_support_model as string,\n\t\tu_support_model_management as string,\n\t\tu_technical_approver_groups as string,\n\t\tu_technical_approvers as string,\n\t\tunverified as string,\n\t\tused_for as string,\n\t\tvendor as string,\n\t\tvirtual as string,\n\t\twarranty_expiration as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> source1\nsource1 select(mapColumn(\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 alterRow(updateIf(equals(sys_id,$param1))) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tasset as string,\n\t\tasset_tag as string,\n\t\tassigned as string,\n\t\tassigned_to as string,\n\t\tassignment_group as string,\n\t\tattributes as string,\n\t\tcan_print as string,\n\t\tcategory as string,\n\t\tcd_rom as string,\n\t\tcd_speed as string,\n\t\tchange_control as string,\n\t\tchassis_type as string,\n\t\tchecked_in as string,\n\t\tchecked_out as string,\n\t\tclassification as string,\n\t\tcomments as string,\n\t\tcompany as string,\n\t\tcorrelation_id as string,\n\t\tcost as string,\n\t\tcost_cc as string,\n\t\tcost_center as string,\n\t\tcpu_core_count as string,\n\t\tcpu_core_thread as string,\n\t\tcpu_count as string,\n\t\tcpu_manufacturer as string,\n\t\tcpu_name as string,\n\t\tcpu_speed as string,\n\t\tcpu_type as string,\n\t\tdefault_gateway as string,\n\t\tdelivery_date as string,\n\t\tdepartment as string,\n\t\tdiscovery_source as string,\n\t\tdisk_space as string,\n\t\tdns_domain as string,\n\t\tdr_backup as string,\n\t\tdue as string,\n\t\tdue_in as string,\n\t\tfault_count as string,\n\t\tfirewall_status as string,\n\t\tfirst_discovered as string,\n\t\tfloppy as string,\n\t\tform_factor as string,\n\t\tfqdn as string,\n\t\tgl_account as string,\n\t\thardware_status as string,\n\t\thardware_substatus as string,\n\t\thost_name as string,\n\t\tinstall_date as string,\n\t\tinstall_status as string,\n\t\tinvoice_number as string,\n\t\tip_address as string,\n\t\tjustification as string,\n\t\tlast_discovered as string,\n\t\tlease_id as string,\n\t\tlocation as string,\n\t\tmac_address as string,\n\t\tmaintenance_schedule as string,\n\t\tmanaged_domain as string,\n\t\tmanufacturer as string,\n\t\tmodel_id as string,\n\t\tmodel_number as string,\n\t\tname as string,\n\t\tobject_id as string,\n\t\toperational_status as string,\n\t\torder_date as string,\n\t\tos as string,\n\t\tos_address_width as string,\n\t\tos_domain as string,\n\t\tos_service_pack as string,\n\t\tos_version as string,\n\t\towned_by as string,\n\t\tpo_number as string,\n\t\tprocessor_name as string,\n\t\tpurchase_date as string,\n\t\tram as string,\n\t\tschedule as string,\n\t\tserial_number as string,\n\t\tshort_description as string,\n\t\tskip_sync as string,\n\t\tstart_date as string,\n\t\tsubcategory as string,\n\t\tsupport_group as string,\n\t\tsupported_by as string,\n\t\tsys_class_name as string,\n\t\tsys_class_path as string,\n\t\tsys_created_by as string,\n\t\tsys_created_on as string,\n\t\tsys_domain as string,\n\t\tsys_domain_path as string,\n\t\tsys_id as string,\n\t\tsys_mod_count as string,\n\t\tsys_updated_by as string,\n\t\tsys_updated_on as string,\n\t\tu_additional_attributes as string,\n\t\tu_application_id as string,\n\t\tu_asset_id as string,\n\t\tu_asset_owner as string,\n\t\tu_business_approver_groups as string,\n\t\tu_business_approvers as string,\n\t\tu_cab_approver_groups as string,\n\t\tu_cab_approvers as string,\n\t\tu_category as string,\n\t\tu_ci_manager as string,\n\t\tu_corporate_structure as string,\n\t\tu_corporatestructure1 as string,\n\t\tu_delivery_date as string,\n\t\tu_device_type as string,\n\t\tu_hardware_operating_system as string,\n\t\tu_hardware_os_version as string,\n\t\tu_managed_by_group as string,\n\t\tu_rack as string,\n\t\tu_refresh_due_date as string,\n\t\tu_room as string,\n\t\tu_site_support_team as string,\n\t\tu_start_tool_last_modified_by as string,\n\t\tu_start_tool_last_modified_date as string,\n\t\tu_support_model as string,\n\t\tu_support_model_management as string,\n\t\tu_technical_approver_groups as string,\n\t\tu_technical_approvers as string,\n\t\tunverified as string,\n\t\tused_for as string,\n\t\tvendor as string,\n\t\tvirtual as string,\n\t\twarranty_expiration as string\n\t),\n\tformat: 'delta',\n\tcontainer: 'parquetoutput',\n\ttruncate: false,\n\tmergeSchema: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['sys_id'],\n\tmapColumn(\n\t\tsys_id,\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet1incoming')]",
				"[concat(variables('factoryId'), '/linkedServices/accdeltaoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/devopsJsonDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "adfinputjson",
								"type": "DatasetReference"
							},
							"name": "inputJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adfoutputJSON",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "source(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> inputJSON\ninputJSON foldDown(unroll(Dependencies),\n\tmapColumn(\n\t\tAirID,\n\t\tComponentName,\n\t\tVersion,\n\t\tEnvironment,\n\t\tEndpoints,\n\t\tPlatform,\n\t\tDependencies = Dependencies,\n\t\tBuilderMeta,\n\t\tEso,\n\t\tServices,\n\t\tTemplates,\n\t\tMRDR,\n\t\tUnsupportedFiles,\n\t\tErrors,\n\t\tFilteredData,\n\t\tDataSource\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfinputjson')]",
				"[concat(variables('factoryId'), '/datasets/adfoutputJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/accadlsinput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('accadlsinput_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('accadlsinput_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfinputjson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accadlsinput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "13456-2020.03.23.2-Sample2.json",
						"fileSystem": "adfinput"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"AirID": {
							"type": "integer"
						},
						"ComponentName": {
							"type": "string"
						},
						"Version": {
							"type": "string"
						},
						"Environment": {
							"type": "array"
						},
						"Endpoints": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Platform": {
							"type": "string"
						},
						"Dependencies": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"sourceType": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"collectionSource": {
										"type": "string"
									},
									"meta": {
										"type": "object",
										"properties": {}
									},
									"custom": {
										"type": "object",
										"properties": {
											"Name": {
												"type": "string"
											},
											"Endpoints": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"InUse[Yes/No]": {
												"type": "boolean"
											}
										}
									}
								}
							}
						},
						"BuilderMeta": {
							"type": "object",
							"properties": {
								"MetadataBuilder": {
									"type": "object",
									"properties": {
										"version": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										}
									}
								},
								"DateTime": {
									"type": "string"
								},
								"VSTS": {
									"type": "object",
									"properties": {
										"Build": {
											"type": "object",
											"properties": {
												"BUILD_REPOSITORY_URI": {
													"type": "string"
												},
												"BUILD_SOURCEBRANCHNAME": {
													"type": "string"
												},
												"BUILD_ARTIFACTSTAGINGDIRECTORY": {
													"type": "string"
												},
												"BUILD_BUILDID": {
													"type": "string"
												},
												"BUILD_BUILDNUMBER": {
													"type": "string"
												},
												"BUILD_BUILDURI": {
													"type": "string"
												},
												"BUILD_BINARIESDIRECTORY": {
													"type": "string"
												},
												"BUILD_DEFINITIONNAME": {
													"type": "string"
												},
												"BUILD_DEFINITIONVERSION": {
													"type": "string"
												},
												"BUILD_REASON": {
													"type": "string"
												},
												"BUILD_REPOSITORY_CLEAN": {
													"type": "string"
												},
												"BUILD_REPOSITORY_LOCALPATH": {
													"type": "string"
												},
												"BUILD_REPOSITORY_ID": {
													"type": "string"
												},
												"BUILD_REPOSITORY_NAME": {
													"type": "string"
												},
												"BUILD_REPOSITORY_PROVIDER": {
													"type": "string"
												}
											}
										},
										"Agent": {
											"type": "object",
											"properties": {
												"AGENT_BUILDDIRECTORY": {
													"type": "string"
												},
												"AGENT_HOMEDIRECTORY": {
													"type": "string"
												},
												"AGENT_ID": {
													"type": "string"
												},
												"AGENT_JOBNAME": {
													"type": "string"
												},
												"AGENT_JOBSTATUS": {
													"type": "string"
												},
												"AGENT_MACHINENAME": {
													"type": "string"
												},
												"AGENT_NAME": {
													"type": "string"
												},
												"AGENT_OS": {
													"type": "string"
												},
												"AGENT_OSARCHITECTURE": {
													"type": "string"
												},
												"AGENT_TOOLSDIRECTORY": {
													"type": "string"
												},
												"AGENT_WORKFOLDER": {
													"type": "string"
												}
											}
										},
										"System": {
											"type": "object",
											"properties": {
												"PIPELINE_WORKSPACE": {
													"type": "string"
												},
												"SYSTEM_COLLECTIONID": {
													"type": "string"
												},
												"SYSTEM_DEFAULTWORKINGDIRECTORY": {
													"type": "string"
												},
												"SYSTEM_DEFINITIONID": {
													"type": "string"
												},
												"SYSTEM_HOSTTYPE": {
													"type": "string"
												},
												"SYSTEM_PULLREQUEST_ISFORK": {
													"type": "string"
												},
												"SYSTEM_PULLREQUEST_PULLREQUESTID": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_PULLREQUESTNUMBER": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_SOURCEBRANCH": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_TARGETBRANCH": {
													"type": "null"
												},
												"SYSTEM_TASKDEFINITIONSURI": {
													"type": "string"
												},
												"SYSTEM_TASKDISPLAYNAME": {
													"type": "string"
												},
												"SYSTEM_TASKINSTANCEID": {
													"type": "string"
												},
												"SYSTEM_TASKINSTANCENAME": {
													"type": "string"
												},
												"SYSTEM_TEAMFOUNDATIONCOLLECTIONURI": {
													"type": "string"
												},
												"SYSTEM_TEAMPROJECT": {
													"type": "string"
												},
												"SYSTEM_TEAMPROJECTID": {
													"type": "string"
												},
												"TASK_DISPLAYNAME": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						},
						"Eso": {
							"type": "array"
						},
						"Services": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Name": {
										"type": "string"
									},
									"Version": {
										"type": "string"
									},
									"InUse": {
										"type": "boolean"
									},
									"collectionSource": {
										"type": "string"
									}
								}
							}
						},
						"Templates": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Name": {
										"type": "string"
									},
									"Version": {
										"type": "string"
									},
									"InUse": {
										"type": "boolean"
									},
									"collectionSource": {
										"type": "string"
									}
								}
							}
						},
						"MRDR": {
							"type": "array"
						},
						"UnsupportedFiles": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Errors": {
							"type": "object",
							"properties": {
								"CRITICAL": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Source": {
												"type": "string"
											},
											"Time": {
												"type": "string"
											},
											"Message": {
												"type": "string"
											}
										}
									}
								},
								"ERROR": {
									"type": "array"
								},
								"WARNING": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Source": {
												"type": "string"
											},
											"Time": {
												"type": "string"
											},
											"Message": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"FilteredData": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"DataSource": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accadlsinput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfoutputdevopscsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "adfoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfoutputJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "adfoutput"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/accoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/devopsdatapipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "devopsJsonDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "devopsJsonDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"inputJSON": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/devopsJsonDF')]"
			]
		}
	]
}